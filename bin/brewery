#! /usr/bin/env python
#

"""Brewery tool

    For more information run: brewery --help
    
    Author: Stefan Urbanek <stefan.urbanek@gmail.com>
    Date: 2010-12
"""

import argparse
import pymongo
import json
import argparse
import sys
import brewery
import ConfigParser
import os.path

CONFIG_PATHS = ['/etc/brewery.conf', \
				'~/.brewery.conf', \
				'./brewery.conf']

def load_config(args):
    paths = CONFIG_PATHS + (args.config if args.config else [])
    config = ConfigParser.SafeConfigParser()

    for path in paths:
        if os.path.exists(path):
            config.read(path)
            
    if config.has_section("extensions"):
        extensions = config.options("extensions")
        for extension in extensions:
            mod_name = config.get("extensions", extension)
            import_extension(extension, mod_name)
                
def import_extension(extension_name, module_name = None):
    """Imports a brewery tool extension from module `module_name`.
    
    Note: extension name is not used yet module_name is specified. Might be used in the future to allow
    different modules replace extensions with same name.
    """
    
    module = __import__(module_name or extension_name)

    
def validate_model(args):
    """docstring for validate_model"""
    print "loading model %s" % args.path
    model = brewery.cubes.model_from_path(args.path)

    print "-------------------------"
    print "cubes: %d" % len(model.cubes)
    for cube_name, cube in model.cubes.items():
        print "    %s" % cube_name
        
    print "dimensions: %d" % len(model.dimensions)
    for dim in model.dimensions:
        print "    %s" % dim.name

    print "-------------------------"
    error_count = 0
    warning_count = 0
    results = model.validate()

    if not results:
        print "model is valid"
    else:
        print "found %d issues" % len(results)
        print "validation results:"
        for result in results:
            if result[0] == "error":
                error_count += 1
            elif result[0] == "warning":
                warning_count += 1
            print "%s: %s" % result
    print "%d errors, %d warnings" % (error_count, warning_count)

def model_to_json(args):
    """docstring for validate_model"""
    model = brewery.cubes.model_from_path(args.path)
    print json.dumps(model.to_dict())

################################################################################
# Main code

parser = argparse.ArgumentParser(description='Brewery runner')
# parser.add_argument('command')
# parser.add_argument('command_args', nargs = '*', default = [])
parser.add_argument('--config', action='append', help='brewery configuration file')
subparsers = parser.add_subparsers(title='commands', help='additional help')

################################################################################
# Command: valdate_model

parser_validate = subparsers.add_parser('validate_model')
parser_validate.add_argument('path', help='path to model directory')
parser_validate.set_defaults(func=validate_model)

################################################################################
# Command: model_to_json

parser_validate = subparsers.add_parser('model_to_json')
parser_validate.add_argument('path', help='path to model directory')
parser_validate.set_defaults(func=model_to_json)

args = parser.parse_args(sys.argv[1:])

load_config(args)
# args.func(args)
